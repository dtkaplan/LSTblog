{
  "hash": "3fa33b2c1614fddb8a2d87b83d69bc4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R-shinylive app in Quarto!\"\nformat:\n  html:\n    grid: \n      body-width: 1300px\n    resources: \n      - shinylive-sw.js\nfilters:\n  - webr\n  - shinylive\n---\n\n\n```{webr-r}\n\n3+2\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshiny::numericInput(\"n\", \"Sample count\", 100)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"form-group shiny-input-container\">\n<label class=\"control-label\" id=\"n-label\" for=\"n\">Sample count</label>\n<input id=\"n\" type=\"number\" class=\"form-control\" value=\"100\"/>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshiny::checkboxInput(\"pause\", \"Pause\", FALSE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"form-group shiny-input-container\">\n<div class=\"checkbox\">\n<label>\n<input id=\"pause\" type=\"checkbox\"/>\n<span>Pause</span>\n</label>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- basicPage(\n  plotOutput(\"plot\", width=800)\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot <- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x <- seq(from = -2, to = 2, length.out = 500)\n    y <- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd <- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n## Video Tutorial\n\nPrefer a hands-on visual guide? Check out the following YouTube video:\n\n[![Creating a Serverless Shiny App using Quarto with R Shinylive](https://img.youtube.com/vi/6y2FnAugP8E/0.jpg)](https://www.youtube.com/watch?v=6y2FnAugP8E)\n\nWe'll go through every step and provide some commentary along the way!\n\n# Using r-shinylive for Serverless Shiny Apps in Quarto Documents\n\nAre you interested in creating your own Quarto document with embedded static Shiny apps? This tutorial will guide you through the process of using the `r-shinylive` R package to achieve just that. Let's get started!\n\n## Installation\n\n**Step 1:** Install the `r-shinylive` R package from CRAN. It can be obtained from the R console using the following command:\n\n```r\ninstall.packages(\"shinylive\")\n```\n\n:::{.callout-note}\nThis step differs from when the tutorial and video were written as the \n`shinylive` package was only able to be obtained from GitHub.\n:::\n\n## Setting Up Your Quarto Project\n\n**Step 2:** Create a new Quarto project. Open your terminal and execute the following command:\n\n```sh\nquarto create project default\n```\n\n![Screenshot showing the Terminal tab of RStudio with the command to create a Quarto project.](images/create-quarto-r-shiny-live-project.png)\n\nWhile creating the project, you'll be prompted to specify a directory name. This name will also serve as the filename for your Quarto document. It's crucial to note that skipping this step will result in the absence of a `_quarto.yml` file, leading to an error when you attempt to render the document. The error message will resemble the following:\n\n```md\nERROR:\nThe shinylive extension must be used in a Quarto project directory\n(with a _quarto.yml file).\n```\n\nEnsure that the contents of the `_quarto.yml` file match the following structure:\n\n```yaml\nproject:\n  title: \"R-shinylive-demo\"\n```\n\nHere, the `title` field should contain the name of the Quarto file up to the extension.\n\n## Installing the Quarto Extension for r-shinylive\n\n**Step 3:** Install the Quarto extension for `shinylive`. In the Terminal tab, run the following command:\n\n```sh\nquarto add quarto-ext/shinylive\n```\n\n![Screenshot showing the Terminal tab of RStudio with the Quarto Extension installation command.](images/install-shinylive-in-terminal.png)\n\n## Including the Shiny App in Your Quarto Document\n\n**Step 4:** To include a Shiny app directly in your Quarto file (`.qmd`), you need to add a filter key for `shinylive` at the top of the desired Quarto file. Open your Quarto file and add the following YAML header:\n\n```yaml\nfilters:\n  - shinylive\n```\n\n**Step 5:** You can insert the code for a Shiny application in a code block marked with `{shinylive-r}`. Below is a skeletal example of how your code block might look:\n\n````md\n---\ntitle: \"Our first r-shinylive Quarto document!\"\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n\nlibrary(shiny)\n\n# Define your Shiny UI here\nui <- fluidPage(\n  # Your UI components go here\n)\n\n# Define your Shiny server logic here\nserver <- function(input, output, session) {\n  # Your server code goes here\n}\n\n# Create and launch the Shiny app\nshinyApp(ui, server)\n```\n````\n\nPlease note that the code block must include `#| standalone: true`, which indicates that the code represents a complete standalone Shiny application. In the future, Quarto will hopefully support Shiny applications with parts spread throughout the document. \n\nFor an example file, you can refer to this bare-bones implementation: [template-r-shinylive.qmd](https://github.com/coatless-quarto/r-shinylive-demo/blob/main/template-r-shinylive.qmd)\n\n\nWith this in mind, let's use Joe's shiny app inside our code block. So, we'll end up using:\n\n````md\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot <- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x <- seq(from = -2, to = 2, length.out = 500)\n    y <- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd <- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n````\n\nYou can view a standalone version of Joe's app here: [R-shinylive-demo.qmd](https://github.com/coatless-quarto/r-shinylive-demo/blob/main/R-shinylive-demo.qmd)\n\n## Rendering Your Quarto Document\n\n**Step 6:** Once you are satisfied with your Shiny app and content, render the document by pressing the Render button in RStudio.\n\n![Press the render button in RStudio](images/rstudio-render-button.png)\n\nOr type in the Terminal tab:\n\n```sh\nquarto preview R-shinylive-demo.qmd --no-browser --no-watch-inputs\n```\n\n\n## Folder Structure\n\nDuring the render process, the output directory should contain the following structure:\n\n```sh\n.\n├── _extensions\n│   └── quarto-ext/shinylive # Added by 'quarto add'\n├── _quarto.yml              # Created by 'quarto create'\n├── R-shinylive-demo.html    # Rendered Document\n├── R-shinylive-demo.qmd     # Quarto Document with Shiny App\n├── R-shinylive-demo_files   # Supporting files\n└── shinylive-sw.js          # Service Worker\n```\n\n## Publishing Your Quarto Document\n\n**Step 7:** Once you are satisfied with your shinylive app and Quarto document, it's time to publish your work. There are multiple options for publishing with Quarto, and we'll present two of them. Choose the option that best suits your needs for sharing and distributing your Quarto document with your embedded shinylive app.\n\n**Option 1: Publish to GitHub Pages**\n\nTo make your Quarto document accessible on [GitHub Pages via Quarto](https://quarto.org/docs/publishing/github-pages.html), use the following command in your terminal:\n\n```sh\nquarto publish gh-pages\n```\n\nThis option is great if you want to share your document through a GitHub Pages website.\n\n**Option 2: Publish to Quarto Pub**\n\nAlternatively, you can publish your Quarto document on [Quarto Pub via Quarto](https://quarto.org/docs/publishing/quarto-pub.html). Use the following command in your terminal:\n\n```sh\nquarto publish quarto-pub\n```\n\nThis option provides you with a shareable link for easy access by others and is a good choice if you prefer a dedicated platform for your documents.\n\n### A Quick Fix for Service Worker Inclusion\n\nIf you've encountered issues with the `quarto publish` command not including the required service worker JavaScript file, you can quickly resolve this by adding the following lines under the `html` key in your document header:\n\n```yaml\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\n```\n\nThis addition ensures that the necessary service worker JavaScript file (`shinylive-sw.js`) is included when you publish your Quarto document. The Quarto team is aware of the issue regarding [service workers not being uploaded automatically from extensions](https://github.com/quarto-dev/quarto-cli/issues/6828).\n\nIf you encounter this issue, you may see an error message in your browser's JavaScript console that looks like:\n\n```\nUncaught Error: ServiceWorker controller was not found!\nThe above error occurred in the <Viewer> component:\n```\n\nBy implementing this quick fix, you can prevent this error and ensure the proper functioning of your shinylive app within your Quarto document.\n\n## Advanced (Optional Step): Continuous Publishing Using GitHub Actions\n\nFor advanced users, you can set up continuous integration (CI) to automatically update your application whenever changes are committed to the Quarto document. This process involves creating a workflow for [GitHub Actions](https://github.com/features/actions) and utilizing actions from [`r-lib/actions`](https://github.com/r-lib/actions) (for R installation) and [`quarto-dev/quarto-actions`](https://github.com/quarto-dev/quarto-actions) (for Quarto setup and publishing).\n\nFollow these steps to configure continuous publishing:\n\n**Step 1:** Create a `.github/` folder in your repository if it doesn't already exist. Place the `workflows/` folder inside it. Then, create a workflow configuration file called `publish-website.yml` with the following content:\n\n```yaml\non:\n  push:\n    branches: [main, master]\n  release:\n      types: [published]\n  workflow_dispatch: {}\n\nname: demo-website\n\njobs:\n  demo-website:\n    runs-on: ubuntu-latest\n    # Only restrict concurrency for non-PR jobs\n    concurrency:\n      group: quarto-website-${{ github.event_name != 'pull_request' || github.run_id }}\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n    steps:\n      - name: \"Check out repository\"\n        uses: actions/checkout@v4\n\n      # To render using knitr, we need a few more setup steps...\n      # If we didn't want the examples to use `engine: knitr`, we could\n      # skip a few of the setup steps.\n      - name: \"Setup pandoc\"\n        uses: r-lib/actions/setup-pandoc@v2\n\n      - name: \"Setup R\"\n        uses: r-lib/actions/setup-r@v2\n\n      - name: \"Setup R dependencies for Quarto's knitr engine\"\n        uses: r-lib/actions/setup-r-dependencies@v2\n        with:\n          packages:\n            cran::shinylive@0.1.1 ## Pin version to ensure consistency\n            any::knitr\n            any::rmarkdown\n            any::downlit\n            any::xml2\n\n      # Back to our regularly scheduled Quarto output\n      - name: \"Set up Quarto\"\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      # Render the Quarto file\n      - name: \"Render working directory\"\n        uses: quarto-dev/quarto-actions/render@v2\n\n      # Upload a tar file that will work with GitHub Pages\n      # Make sure to set a retention day to avoid running into a cap\n      # This artifact shouldn't be required after deployment onto pages was a success.\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v2\n        with: \n          retention-days: 1\n      \n      # Use an Action deploy to push the artifact onto GitHub Pages\n      # This requires the `Action` tab being structured to allow for deployment\n      # instead of using `docs/` or the `gh-pages` branch of the repository\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n```\n\n:::{.callout-note}\nWe have pinned the version of `shinylive` package on CRAN to v0.1.1 to ensure\nconsistency with the `quarto-ext/shinylive` Quarto extension. \n:::\n\n**Step 2:** Enable GitHub Pages deployment using GitHub Actions in your\nrepository by going to the repository's `Settings` tab, selecting `Pages`, and\nthen under the build and deployment section set scource to GitHub Actions. Please\nmake sure to also check the **Enforce HTTPS** option.\n\n![Enabling GitHub Pages deployment through GitHub Actions](images/enable-github-pages-deployment-by-github-actions.png)\n\n\nBy implementing this advanced setup, your Quarto document with the embedded shinylive app will automatically update whenever changes are pushed to the specified branches or when a release is published. This ensures that your audience always has access to the latest version of your interactive document.\n\n# Fin\n\nNow you have successfully integrated static Shiny apps into your Quarto documents using the `r-shinylive` package. Happy Quarto + r-shinyliving!\n\n## References\n\n- [Shinylive R Package](https://github.com/posit-dev/r-shinylive)\n- [Shinylive Quarto Extension](https://github.com/quarto-ext/shinylive): Static Shiny app\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}