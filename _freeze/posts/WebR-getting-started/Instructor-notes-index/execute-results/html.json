{
  "hash": "60fd57be0c2a203a5874d0e905f6c769",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Instructor's Guide to Starting with WebR\"\nauthor: \"Daniel Kaplan\"\ndate: \"2024-05-01\"\ncategories: [LSTbook, computing, WebR]\n# Enable webR\nwebr:\n  channel-type: 'automatic'\n  packages: ['ggplot2', 'dplyr', 'LSTbook', 'ggformula', 'mosaicData', 'moderndive', 'palmerpenguins', 'babynames', 'stringdist', 'mosaicData']\nfilters:\n  - webr\n---\n\n\nThese notes are intended for instructors who want to get started or experiment with using WebR in their notes/assignments/etc. for students.\nWebR is a full-featured version of R that runs in the student's browser.\n\n::: {.callout-note}\n## Help refine this document\n\nThis document is useful only insofar as instructors can make sense of it. If you find it confusing, please let me know so that I can fix it. Write to me at `kaplan@macalester.edu`.\n:::\n\nUsing WebR has advantages both for the student and the instructor. \n\n- Documents including computation are ordinary HTML (+  JavaScript) that can be posted on the web in straightforward ways.\n- There is no need to set up a server.\n- Computation can be positioned close to the text narrative that explains it or close to the exercise that a student is working on. \n- Any packages required can be easily specified by the instructor and will be automatically loaded into the document's WebR session.\n- The interface is much simpler than RStudio. That said, the instructor herself will develop the documents using RStudio. And some instructors encourage students to write RMarkdown documents to record their work. That doesn't work at all in WebR. \n\nThe word \"chunk\" is used for a block of executable code embedded in a document. @lst-base-graphics is an example of a WebR chunk with an R statement pre-positioned inside. The R code can be edited or entirely replaced by the student working with the chunk. Press \"Run Code\" to carry out the computation.\n\n::: {#lst-base-graphics}\n```{webr-r}\nplot(mpg ~ wt, data = mtcars)\n```\n:::\n\nThe markup to create a chunk is very simple. For the above chunk it is\n\n````markdown\n```{webr-r}\nplot(mpg ~ wt, data = mtcars)\n```\n````\n\n::: {.callout-note}\n## `{ggplot2}` and related graphics.\n\nIn @lst-base-graphics I have used base R graphics just for the convenience of the reader. You can also use `{ggplot2}` graphics, perhaps with the `{ggformula}` interface. To demonstrate this, here are some more webr chunks. You could equally well paste their contents into the previous chunk.\n\n```{webr-r}\nmtcars |> \n  ggplot(aes(x = wt, y = mpg)) + \n  geom_point(color = \"blue\")\n```\n\n`{ggformula}` graphics:\n```{webr-r}\nmtcars |> gf_point(mpg ~ wt, color = \"brown\")\n```\n\nGraphics from [*Lessons in Statistical Thinking*](https://dtkaplan.github.io/Lessons-in-statistical-thinking/L02-Pointplots.html#point-plot):\n```{webr-r}\nmtcars |> point_plot(mpg ~ wt, annot = \"model\")\n```\n:::\n\n## Preliminaries\n\nWe will use the [*quarto*](https://quarto.org/) system for producing HTML documents. Consequently, a first step is to install *quarto* on your computer. You need version 1.4 (or later), so even if you have already been using *quarto*, you may need to update. [To find out, give this command in your **terminal**: `quarto --version`]{.aside} Follow the \"Get Started\" link on the [*quarto*](https://quarto.org/) homepage.\n\n*Quarto* is a stand-alone program. You will be using it from RStudio, but there are a couple of occasions when you will use the **terminal* rather than the R console to set things up.\n\nWe presume that you have R and RStudio installed. If you are not familiar with RStudio, you will need to become so before you can make sense of the following instructions.\n\nAt this point, we won't worry about how to deploy the documents you write on a web site. You can write functioning documents without this. That way you can try out WebR before having to set up a web site. (See web documentation on \"quarto blog site\" (e.g. [this page](https://quarto.org/docs/publishing/)) if you're curious about how to set up a suitable web site.)\n\n## Producing your first document\n\nThere's an excellent [four-minute video](https://youtu.be/DoRR2S5lLvk?t=5) by James Balamuta, the *Coatless Professor*. This covers just about everything you need to get started (once you have installed *quarto* and RStudio), including creating an RStudio project and a *quarto* document.\n\nTake care to note what is clearly shown at time 1:38 in the video, the very brief use of the **terminal** (as opposed to the R console) to give the command up the RStudio project to use WebR. \n\n```rmarkdown\nquarto add coatless/quarto-webr\n```\n\nYou can create many documents within one project. You only have to do the `quarto add ...` once for each project. After that, you work only in RStudio.\n\nThe *Coatless Professor*'s video brings you all the way through displaying a working WebR document in the RStudio \"Viewer\" tab. But you can equally well open the document in a browser. (On the Viewer tab menu bar, click the \"Show in New Window\" button, which looks like a sheet of paper with an upward-facing arrow.)\n\nThe *Coatless Professor* provides more links to information [on this GitHub web page](https://github.com/coatless/quarto-webr?tab=readme-ov-file). Those not familiar with GitHub may be put off by the material at the top of the page. Simply scroll down until you get to the part that looks like an ordinary web page.\n\n## Editing your document\n\nThe *Coatless Professor* video shows you the very few steps needed to set up your document for WebR. I want to elaborate just a little bit.\n\nAt the top of the example document there is a header, delimited by lines with `---`, that contains information used by the *quarto* system. This information is written in a format called \"YAML.\" Keep that name in mind. \n\n\n\n```{.default}\n---\ntitle: webR in Quarto HTML Documents\nformat: html\nengine: knitr\nfilters:\n  - webr\n---\n```\n\n\nYou're free to edit the title, but leave the other items alone. YAML is very sensitive to formatting errors.\n\nThe example document sets up a WebR session using base R. Many instructors will want to access R packages. To set up the document to do this automatically, add the following to the YAML header (inside the `---` delimiters). (Use the <i class=\"bi bi-clipboard) to copy the contents to the clipboard before pasting into your *quarto* document.)\n\n\n::: {.cell code-copy='true'}\n\n```{.r .cell-code}\nwebr:\n  channel-type: 'automatic'\n  packages: ['ggplot2', 'dplyr', 'LSTbook', 'ggformula', 'mosaicData', 'moderndive', 'palmerpenguins', 'babynames', 'stringdist', 'mosaicData']\n```\n:::\n\n\nThe particular packages listed are those I use in the [*Lessons*](https://dtkaplan.github.io/Lessons-in-statistical-thinking) book. You may want to exclude some of these or include others (such as the `{mosaic}` package.) For those packages listed, you will not have to use the `library()` command in your WebR document. Neither do you need to `install.packages()`, this happens automatically. (Note that you can use `library()` in a WebR chunk, if that suits your pedagogy.)\n\n## Moving forward ...\n\nOnce you have gained experience creating WebR *quarto* documents, you will want to learn how to deploy them to a web server so that your students can use them, too. That's a [multi-stage process to initialize](../WebR-on-github-pages), but much simpler in day-to-day use.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}