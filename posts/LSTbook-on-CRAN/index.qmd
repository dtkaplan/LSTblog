---
title: "`{LSTbook}` R package released on CRAN"
author: "Daniel Kaplan"
date: "2024-02-01"
categories: [software]
---

After more than a year of development, the `{LSTbook}` R package has been released to CRAN, the official distribution site for R packages. You can browse through the package vignettes and documentation at [package repository](dtkaplan.github.io/LSTbook), and install `{LSTbook}` in the normal way:

```{r eval=FALSE}
install.packages("LSTbook")
```

::: {.column-margin}
For those users who want the ongoing development version of the package, install it this way:
`remotes::install_github("dtkaplan/LSTbook")`
:::

The *LST* book contains many examples using data. Many of the data frames referenced in *LST* are provided by `{LSTbook}`. (Others are provided by `mosaicData` and other similar packages.)

Perhaps more importantly, *LST* uses a very streamlined syntax for commands unified around the R pipe (`|>`) and is designed to interoperate with tidy packages such as `{dplyr}`. Almost every R command used in *LST* has a consistent structure:

```r
Noun |> verb1 |> verb1 ...
```

The noun is typically a data frame. The verbs are graphics and wrangling operations, model fitting, model summarizing, simulating with DAGs. `{LSTbook}` provides a handful of easy-to-use verbs that permit sophisticated computing with a simple syntax.

After you've installed `{LSTbook}`, load it into your R session:

```{r message=FALSE}
library(LSTbook)
```

We'll illustrate the most commonly used R functions from `{LSTbook}` using the `mosaicData::Galton` data frame. This contains Francis Galton's data from 1880s London on the height of fully-grown children and their parents.

## Graphics

*LST* uses a single, standard graphics type: the *annotated point plot*. The virtue of standardizing graphics is that students know what they are looking at. For example, the axes are always variables and the layout of the point plot is described by a tilde-expression such as `height ~ mother`. Try out these examples:

```{r results="hide"}
mosaicData::Galton |> point_plot(height ~ sex)
mosaicData::Galton |> point_plot(height ~ mother)
mosaicData::Galton |> point_plot(height ~ mother + sex)
```

Graphics with four variables are difficult for newbies to interpret, but they are easy to make with `point_plot()`:

```{r results="hide"}
mosaicData::Galton |>
  point_plot(height ~ mother + father + sex, annot = "model")
```

The `annot = "model"` argument instructs `point_plot()` to annotate the point plot with the model function corresponding to the tilde expression. I think the model is the only way to make sense of the 4-variable point plot, but `annot = "model"` applies to simpler plots as well.

## Model training

*LST* is oriented around regression modeling, both linear and logistic. This can be introduced gently with the `point_plot(..., annot = "model")` graphic, but it applies as well to more formal methods such as confidence intervals and prediction intervals. Picking up on the previous examples:

```{r}
mosaicData::Galton |> model_train(height ~ mother) |> conf_interval()
mosaicData::Galton |> model_train(height ~ mother + father + sex) |> R2()
```

Two level categorical variables, such as `sex` in the `mosaicData::Galton` data, are easily converted to zero-one variables suitable for logistic regression. For instance:

```{r message=FALSE}
mosaicData::Galton |> model_train(zero_one(sex, one = "F") ~ mother) |>
  conf_interval()
```

## Data simulations and repeated trials





