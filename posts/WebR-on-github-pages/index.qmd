---
title: "Deploying WebR Documents via GitHumb"
author: "Daniel Kaplan"
date: "2024-05-01"
categories: [LSTbook, computing]
# Enable webR
webr:
  channel-type: 'automatic'
  packages: ['ggplot2', 'dplyr', 'LSTbook', 'ggformula', 'mosaicData', 'moderndive', 'palmerpenguins', 'babynames', 'knitr', 'rmarkdown', 'stringdist', 'mosaicData' ]
filters:
  - webr
---

The goal of this document is to set you up to publish your own WebR documents for your course(s).

::: {.callout-tip}
## Pre-requisites

You should already have reached the point where you can author a WebR document on your computer and view it in your browser. See the [*Instructor's Guide to Starting with WebR*](../WebR/).
:::

Once you know how to create a WebR document, the next step is to make that document (and others) available to your students. We will describe one way, which is free, flexible, widely used, and integrates well with the creation of *quarto* documents in RStudio.

There are several steps, some of which you may already be familiar with. If so, just check off such steps in the following lists.

## RStudio

- [ ] Install R and RStudio. They are separate programs that interact with each other. There are many instructions on the web.

- [ ] Install "git", which is software that keeps track of documents and is the main way RStudio talks to the system we use in the next section, "On GitHub" [-@sec-on-github]. Get instructions for this via a web search for "RStudio install git". I like this page: ["Happy Git and GitHub for the useR"](https://happygitwithr.com/install-git.html). The installation process depends on your operating system.

- [ ] Open RStudio. (If it was already open, close it and open it again.)

- [ ] At the top right of the RStudio window is a dropdown menu. Select "New Project ..." then "New Directory". You will be presented with a list of project types. Select "Quarto Blog." [After we gain some experience from instructors who use these instructions, we suggest a different project type.] 

    - Choose a simple directory name for the project, for instance the name of the course you are going to work on, e.g. "Stats123." (Later, you will use this same name for the repository you set up on GitHub.) It's wise to avoid spaces in the name. 
    
    - Press "Create Project." RStudio will reshape itself. In the editor pane there will be two documents: `index.html` and `quarto.yml`. 
        - In the `index.html` file, edit the title to something appropriate for your purposes and save the result. 
        - In addition, edit the `quarto.yml` file slightly. Again, there is a title field that you can change, but there is another change you need to make. At the top of the `quarto.yml` file are the first two lines of the text in @lst-set-up-docs: Your job is to add the third line. Spacing, spelling, and punctuation must not deviate from the above. Save the result.

::: {#lst-set-up-docs}    
```
project:
  type: website
  output-dir: docs
```

What the top of your `quarto.yml` file should look like.
:::

- [ ] Go back to the `index.html` file and press "Render." A blog site will appear in the "Viewer" tab in RStudio.

- [ ] Next step ... On GitHub.

    


## On GitHub {#sec-on-github}

- [ ] Get a [GitHub account](github.com). This is free. GitHub is used by millions of people. Here is the [documentation for setting up an account](https://docs.github.com/en/get-started/onboarding/getting-started-with-your-github-account). The "free" level of account will be entirely satisfactory for most instructors. Start with that.

    - For the present, don't worry about "learning Git." That can come later, through experience.
    - For the purpose of a running example, imagine that your account is named "ProfessorSmith".

- [ ] Go to your GitHub home page. The URL will be (in our example) "github.com/ProfessorSmith". There will be a bright green button labelled "New." Press it to start the process of creating a new repository, via a page appropriately entitled "Create a New Repository." [Note: Eventually, but not now, you will likely have several repositories, for example, one for each course.]

    - For the purpose of the running example, suppose that your repository is to be named "Stat123".
    
- [ ] On the "Create a New Repository" page, enter the name for your repo: "Stat123" in our example. Leave the other fields alone. Then press the green "Create Repository" button. The result will be a new page with the heading "Quick Setup---if you've done this kind of thing before." 

- [ ] One the "Quick Setup" page, there is a section labelled "... or create a new repository on the command line." Underneath it is code, which will look like the following but will have your own user name and repository name instead of the "ProfessorSmith" and "Stat123" we are using for an example.

::: {#lst-push-to-remote}
```
echo "# stat123" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/ProfessorSmith/stat123.git
git push -u origin main
```

The text you will be copying from the "Quick Setup" page will look like this, but with your own user name and repository name.
:::

## Back to RStudio

You have now copied onto your clipboard text from GitHub that looks like @lst-push-to-remote. Now go back to your *quarto* blog project ("Stat123") that you created previously.

- [ ] Move to the "Terminal" tab that is in the same pane as "Console." 

- [ ] Paste the text (as in @lst-push-to-remote) that you earlier copied from GitHub to your clipboard. Press return. Stuff will happen.

- [ ] Close RStudio and re-open it again. Now there will be a "Git" tab in the same Pane as "Files," "Plots," etc. Go to the "Git" tab.

- [ ] On the "Git" tab there will be a listing of files, each with a small checkbox on the left. Check all of the boxes. Then, press "Commit." This will create a pop-up with a place to edit a message. A good message for your first commit is "First commit". But you can put whatever you want. Then press the "Commit" button under your message.

- [ ] Arrange to publish web pages via your GitHub repository. This facility is called "github pages." Much of the documentation for this is intended for people who have complicated needs. But an instructor's web site need not be complicated.

    - [ ] In your browser, go to the homepage of your repository. Using the running example, the URL will be `github.com/ProfessorSmith/Stat123`.

    - [ ] There is a bright green button on your repository homepage. We won't need this until later. What we need at this step is the "Add File" button. Use this to "Create new file." This will bring you to another page where you can create the file.
    
    - [ ] There is an editing pane on the "Create new file" page. Just above it is the name of your repository followed by a slash: Stat123/ in our running example. Next to this is a "name your file ..." text entry area. Insert "docs/temp.html". Make sure to use "docs/". Then type some fill in the edit pane, for instance, "It's a nice day." Then press the bright green "Commit changes ..." button. This will pop up a window where there is a "Commit changes" button. Press it.
    
    - The point of this step is merely to create a `docs/` directory in your repository. Using that name makes it easier to work with the RStudio tool set, as you will see later.

    - [ ] There is a "Settings" link in a menu bar near the top of the repository homepage. Click it. Then, in the menu on the left, go down to "Pages". In the page that appears ...
    
        a. Find the "branch" section. There is a button that will probably be labelled "none." When you click on it, you will be offered some selections. Choose "main."
        
        b. Next to the button from step (a), there will be a button with a file icon and that probably is labelled "/(root)". Change this to say, "/docs".
        
        c. Press the "Save" button next to the button that now says "/docs". 
        
- [ ] Return to the repository home page. (e.g. ProfessorSmith/Stat123). One way to do this is by pressing the "<> Code" item in the menu bar near the top of the page.

- [ ] One the home page is a bright green "<> Code" button that you saw earlier. Now we are going to use it. Click on it to open a popup labeled "clone." Make sure you are on the HTTPS tab in the popup. There will be a URL which contains your GitHub user name and the name of the repository. Something like "ProfessorSmith/Stats123.git". Copy that name to your browser. You are going to paste the name into RStudio in the next section.
  
## Back to RStudio

- [ ] In the upper right corner of the RStudio window, there is a small dropdown menu. Select "New Project ..." then "Version Control" then "Git". The resulting pop-up window will have a text-entry field labelled "Repository URL." Paste into this field the URL you copied from the bright green button in GitHub. (This is "ProfessorSmith/Stats123.git" in our running example.) Then press "Create Project."

- [ ] RStudio will reconfigure its window and you will be in the "Stats123" project you've just created. Now you have to tell RStudio what kind of project you want. 

    - In the RStudio menu bar on your computer, go to "Build" then "Configure Build Tools".


<!--

Your job is to add the third line. Spacing, spelling, and punctuation must not deviate from the above. Save the result.

-->
