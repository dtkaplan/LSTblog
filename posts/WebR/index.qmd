---
title: "LST computing in your browser"
author: "Daniel Kaplan"
date: "2024-04-03"
categories: [LSTbook, computing]
# Enable webR
webr:
  channel-type: 'automatic'
  packages: ['ggplot2', 'dplyr', 'LSTbook', 'ggformula', 'mosaicData', 'moderndive', 'palmerpenguins', 'babynames', 'knitr', 'rmarkdown', 'stringdist', 'mosaicData' ]
filters:
  - webr
---

This page provides an easy way to get started with computing for *Lessons in Statistical Thinking*.

Instructions: 

1. Write your commands in the code chunk.
2. Sometimes it takes about 15 seconds (or longer, depending on your web connection)for this page to initialize. (You'll see a "installing package" message in the chunk during initialization.) Keeping this page open in your browser will help speed the initialization.

-----

```{webr-r}
#| context: setup
#| echo: false
fx <- function(x) sin(x)
```


**Write your R statements here**.
```{webr-r}
mtcars |> 
  model_train(mpg ~ hp + wt) |>
  conf_interval()


```


The following chunks are for your convenience. For instance, you might want to copy-and-paste some code from the previous chunk in order to be able to refer to it later.

```{webr-r}

```

```{webr-r}

```

<label for="student_name">Student Name/Section/etc.</label>

<textarea id="student_name" name="student_name" rows="2" cols="50">
</textarea>

:::: {.panel-tabset}

## Data 

::: {.callout-note collapse="true"}
## Data frames

Many data frames are already available by name. Commonly used examples in *Lessons* include: `Birdkeepers`, `Grades`, `Galton`, `Hill_racing`, `Penguins`, `SAT`, `TenMileRace`, `Whickham`

**Looking at the codebook for a data frame**

Use `?` followed by the name of the data frame.
```{webr-r}
?Birdkeepers
```

**See the first several rows**

```{webr-r}
Birdkeepers |> head()
```

**See the variable names**

```{webr-r}
Birdkeepers |> names()
```
:::


## Point plots

::: {.callout-note collapse="true"}
## Pipeline to `point_plot()`

The most common operation in *Lessons* is to make a point plot of a *response variable* versus one or more *explanatory variables.*
To illustrate, here is a point plot of flipper length versus species for three different species of penguins, using the data recorded in the `Penguins` data frame.

```{webr-r}
Penguins |> point_plot(flipper ~ species)
```

The name of the data frame comes first in the R command. The `|>` creates a pipeline into an operation on the data. The particular operation here is `point_plot()`. 

`point_plot()` requires one argument: a tilde expression with the name of the response variable on the left and the explanatory variable on the right. In the above example, the tilde expression is `flipper ~ species`. (The squiggly character, ${\LARGE \sim}$, is called a "tilde.")

*Activity*:

a. Each dot in the point plot corresponds to a single row in the `Penguins` data frame. The dots are slightly spread apart horizontally at random. What is this spread-apart technique called and why is it useful.

b. Add a violin annotation to the above plot by giving a second argument, `annot = "violin"`. (Note the quotes around `"violin"`.) For what value of `flipper` is the Adelie species violin the thickest? Choose one of 175mm, 185mm, 190mm, 200mm. How about for the Chinstrap penguins?

c. Remove the violin annotation and replace it with `annot = "model"`. What do the annotations look like?

d. Each species has its own model annotation. The vertical extent of the annotation indicates the precision of the model. When two such annotations (for different species) overlap vertically, the statistical methodology is telling us that we cannot statistically discern that the model values are different for the two species. Do any of the annotations overlap vertically?

> *Note: We know that `flipper` is in mm from the documentation (also sometimes called the "codebook") for the `palmerpenguins::penguins` data frame.* To see the codebook, use `?` followed by the name of the data frame. Try it!
```{webr-r}
?palmerpenguins::penguins
```

:::

## Wrangling

## Model shapes

## Simulation





## Wrangling

## Computing

::: {.callout-note collapse="true"}
## Storage arrow

The following chunk trains a simple model of the child's `height` as a function of the heights of the  `mother` and `father`. Using the storage arrow (`<-`), the trained model is stored under the name `Mod1`.
```{webr-r}
Mod1 <- Galton |> model_train(height ~ mother + father)
```

Having stored the trained model, you can access it to look at it or perform additional operations on it in a subsequent chunk. Of course, you have to "Run Code" the first chunk before you can use those results in any subsequent chunk.

```{webr-r}
#| read-only: true
Mod1 |> conf_interval()
```
:::


::: {.callout-note collapse="true"}
## Dependent code chunks

The following chunk trains a simple model of the child's `height` as a function of the heights of the  `mother` and `father`. Using the storage arrow (`<-`) the model is stored under the name `Mod1`

**Chunk 1**
```{webr-r}
Mod1 <- Galton |> model_train(height ~ mother + father)

```

Chunk 2, below, does some additional processing on the `Mod1` object. 

**Chunk 2**
```{webr-r}
#| label: Hello
Mod1 |> conf_interval()

```

Press "Run Code" in Chunk 1 and then in Chunk 2. So long as you run Chunk 1 first, Chunk 2 will have access to the already created `Mod1`. But if you try to run Chunk 2 *before* having run Chunk 1, you will get an error message.

*Activity*

a. Press the "start over" icon (<i class="fa-solid fa-rotate"></i>) in Chunks 1 and 2 to reset the chunks to their original content. 

#. Run Code Block 2 *without* having previously run Block 1. What happens?
#. Now run Block 1. Afterwards, run Block 2. What has changed from (a)?
#. Press <i class="fa-solid fa-rotate"></i> in Block 1. then run Block 2 again. What happens?
#. Run Block 1 again, then press <i class="fa-solid fa-rotate"></i> for Block 2. Can you then run Block 2 successfully?
:::

## Computing


### Annotated point plots

```{webr-r}
Birdkeepers |> 
  point_plot(YR ~ AG + FM, annot = "model")
```

::::: 
<!-- end of tabset -->
